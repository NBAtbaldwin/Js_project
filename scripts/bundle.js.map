{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/createPads.js","webpack:///./scripts/createScene.js","webpack:///./scripts/demo.js","webpack:///./scripts/entry.js","webpack:///./scripts/metronome.js","webpack:///./scripts/playUtil.js","webpack:///./scripts/randomizer.js","webpack:///./scripts/recordingUtil.js","webpack:///./scripts/soundUtil.js","webpack:///./scripts/tutorial.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAO;AACP;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,mBAAmB,QAAQ;AAC3B;AACA,yCAAyC,eAAe;AACxD,2CAA2C,EAAE,GAAG,EAAE;AAClD;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAO;AACP;;AAEA;AACA;AACA,8CAA8C,IAAI;AAClD;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA,iBAAiB,QAAQ;AACzB;AACA,wCAAwC,EAAE;;AAE1C;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;AAC5B;AACA,uCAAuC,EAAE,OAAO,WAAW;AAC3D,mDAAmD,IAAI;AACvD;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;;;;;;;;;;;;AC3CA;AAAA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,sEAAO,EAAC;;;;;;;;;;;;;ACnBvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACO;AACP;AACG;AACE;AACZ;AACS;AACJ;;;AAGlC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,kDAAS;AACpC;AACA;AACA;;AAEA;;AAEA,EAAE,yDAAsB;AACxB,EAAE,sDAAmB;AACrB,uBAAuB,iDAAQ;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,sBAAsB,kDAAS;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAS;AAC/B;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,sBAAsB,kDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wDAAuB;;AAE7B;AACA;;AAEA,KAAK;AACL,MAAM,wDAAuB;AAC7B;AACA;;AAEA;AACA;;AAEA,KAAK;AACL,MAAM,wDAAuB;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA,MAAM,oDAAmB;AACzB,KAAK;AACL,GAAG;;AAEH;AACA;AACA,8DAA8D,UAAU;AACxE;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAuB;AAC3B,oBAAoB,kDAAS;AAC7B;AACA;AACA,yBAAyB,mDAAU;AACnC;AACA,GAAG;;AAEH;;;;;;;;;;;;;AC9NA;AAAA;AAAA;AAAuC;AACU;;AAEjD;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,wDAAuB;AAC3B,IAAI,wDAAuB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,qDAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,oCAAoC,wDAAuB;AAC3D;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,oCAAoC,wDAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,uDAAsB;AAC5B,MAAM,yDAAwB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAmC;AACpD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEe,wEAAS;;AAExB;;;;;;;;;;;;;ACjKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACA,oDAAoD,KAAK;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEO;AACP,oDAAoD,KAAK;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEO;AACP;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEO;AACP;AACA;;;;;;;;;;;;;ACvEA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;;AAEA;AACA;AACA,+BAA+B,KAAK;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,WAAW;AACjC,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,WAAW;AACjC,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,WAAW;AACjC,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK,OAAO,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,KAAK,OAAO,MAAM;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;AAIe,yEAAU,EAAC;;;;;;;;;;;;;AC/P1B;AAAA;AAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA,gBAAgB,IAAI,OAAO,IAAI;AAC/B;;;;;;;;;;;;;ACdA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,4FAA4F,0BAA0B;AACtH;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,4FAA4F,yBAAyB;AACrH;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,wEAAS,EAAC;;;;;;;;;;;;;ACnGzB;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sEAAsE;AACtE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sEAAsE;AACtE,KAAK;AACL;AACA,sEAAsE;AACtE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,sEAAsE;AACtE,KAAK;AACL;;AAEA;;AAEe,uEAAQ,EAAC","file":"./scripts/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./scripts/entry.js\");\n","export const createPads = () => {\n  const master = document.getElementById(\"pads-master\");\n  for (let i = 0; i < 3; i++) {\n    let rowDiv = document.createElement('div');\n    rowDiv.setAttribute('class', 'pad-row');\n    rowDiv.setAttribute('id', `pad-row-${i}`);\n    master.appendChild(rowDiv);\n    for (let j = 0; j < 12; j++) {\n      let colDiv = document.createElement('div');\n      colDiv.setAttribute('data-key', `${keyCodes[i][j]}`);\n      colDiv.setAttribute('id', `pad-col-${i}-${j}`);\n      colDiv.setAttribute('class', `pad`);\n      colDiv.innerHTML = `${keyNames[i][j]}`\n      rowDiv.appendChild(colDiv);\n    }\n  }\n}\n\nconst keyNames = [\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '='],\n  ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']'],\n  ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\\'', 'enter']\n];\n\nconst keyCodes = [\n  ['49', '50', '51', '52', '53', '54', '55', '56', '57', '48', '189', '187'],\n  ['81', '87', '69', '82', '84', '89', '85', '73', '79', '80', '219', '22'],\n  ['65', '83', '68', '70', '71', '72', '74', '75', '76', '186', '222', '13']\n];\n","export const createScenes = () => {\n  const master = document.getElementById(\"sequence-master\");\n\n  [0, 1, 2].forEach((num) => {\n    const subMaster = document.createElement(\"div\");\n    subMaster.setAttribute(\"id\", `sequencer-${num}`)\n    master.appendChild(subMaster);\n    createScene(subMaster, num)\n\n  });\n\n}\n\nconst createScene = (subMaster, num) => {\n  for (let i = 0; i < 32; i++) {\n    let rowDiv = document.createElement(\"div\");\n    rowDiv.setAttribute(\"class\", `row-${i}`);\n\n    if (i % 4 === 0) {\n      rowDiv.classList.add('quarter');\n    }\n\n    subMaster.appendChild(rowDiv);\n    for (let j = 11; j >= 0; j--) {\n      let colDiv = document.createElement(\"div\");\n      colDiv.setAttribute(\"id\", `row-${i}-col-${j+(num*12)}`);\n      // colDiv.setAttribute(\"class\", `sequencer-${num}`)\n      rowDiv.appendChild(colDiv);\n\n      // click div to create note\n      colDiv.addEventListener('click', () => {\n        Array.from(colDiv.classList).join('').includes(\"selected\") ? colDiv.classList.remove(\"selected\") : colDiv.classList.add(\"selected\")\n      })\n\n      // drag mousedown over div to create note\n      colDiv.addEventListener('mouseover', (e) => {\n        if(e.buttons == 1 || e.buttons == 3) {\n          Array.from(colDiv.classList).join('').includes(\"selected\") ? colDiv.classList.remove(\"selected\") : colDiv.classList.add(\"selected\")\n        }\n      })\n\n    }\n  }\n}\n","const littleDitty = [\"row-0-col-7\", \"row-0-col-2\", \"row-0-col-1\", \"row-1-col-7\", \"row-2-col-7\", \"row-3-col-7\", \"row-4-col-7\", \"row-4-col-4\", \"row-5-col-7\", \"row-6-col-7\", \"row-6-col-2\", \"row-7-col-7\", \"row-8-col-8\", \"row-8-col-7\", \"row-9-col-7\", \"row-10-col-7\", \"row-10-col-2\", \"row-10-col-1\", \"row-11-col-7\", \"row-12-col-7\", \"row-12-col-4\", \"row-13-col-7\", \"row-13-col-2\", \"row-14-col-7\", \"row-15-col-7\", \"row-16-col-7\", \"row-16-col-2\", \"row-16-col-0\", \"row-17-col-7\", \"row-18-col-7\", \"row-19-col-7\", \"row-20-col-7\", \"row-20-col-4\", \"row-21-col-7\", \"row-22-col-7\", \"row-22-col-2\", \"row-22-col-0\", \"row-23-col-8\", \"row-23-col-7\", \"row-24-col-7\", \"row-25-col-7\", \"row-26-col-7\", \"row-26-col-2\", \"row-27-col-7\", \"row-28-col-7\", \"row-28-col-4\", \"row-29-col-7\", \"row-29-col-4\", \"row-30-col-7\", \"row-30-col-2\", \"row-31-col-7\", \"row-0-col-12\", \"row-6-col-15\", \"row-16-col-14\", \"row-22-col-17\", \"row-0-col-24\", \"row-2-col-26\", \"row-4-col-27\", \"row-6-col-29\", \"row-7-col-31\", \"row-8-col-34\", \"row-10-col-31\", \"row-11-col-32\", \"row-12-col-29\", \"row-13-col-31\", \"row-14-col-27\"];\n\nconst runDemo = (metronome, context) => {\n  littleDitty.forEach( id => {\n    let div = document.getElementById(id);\n    div.classList.add('selected');\n  });\n  document.getElementById('chord-0').classList.add('selected');\n  document.getElementById('mono-0').classList.add('selected');\n  document.getElementById('tempo').value = \"47\";\n  document.getElementById('tempo-slide').value = \"47\";\n  metronome.tempo = 47;\n  metronome.tempoEventListener();\n  metronome.handlePlay();\n  metronome.playing = true;\n  document.getElementById('play').classList.add('selected')\n\n}\n\nexport default runDemo;\n","import Metronome from './metronome';\nimport * as SceneUtil from './createScene';\nimport SoundUtil from './soundUtil';\nimport * as PlayUtil from './playUtil';\nimport * as PadsUtil from './createPads';\nimport RunDemo from './demo';\nimport Randomizer from './randomizer';\nimport Tutorial from './tutorial';\n\n\nlet context;\nlet audioBufferSourceNode;\nconst keySet = new Set([65, 83, 68, 70, 71, 72, 74, 75, 76, 186, 222, 13, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 219, 221, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189, 187]);\n\nwindow.addEventListener('load', init, false);\nfunction init() {\n  window.AudioContext = window.AudioContext||window.webkitAudioContext;\n  context = new AudioContext();\n  const soundFactory = new SoundUtil(context);\n  soundFactory.generateDrums();\n  soundFactory.generateChord(0);\n  soundFactory.generateMono(0);\n\n  soundFactory.keyDownEventListener();\n\n  SceneUtil.createScenes();\n  PadsUtil.createPads();\n  const tutorial = new Tutorial();\n  tutorial.initialize();\n\n  const playButton = document.getElementById('play');\n  const metButton = document.getElementById('metronome');\n  const recordButton = document.getElementById('record');\n  const clearNodeList = document.getElementsByClassName('clear');\n  const tempoField = document.getElementById('tempo');\n  const chordNodeList = document.getElementsByClassName('chord');\n  const monoNodeList = document.getElementsByClassName('mono');\n  const tempoSlide = document.getElementById('tempo-slide');\n  const pads = document.querySelectorAll('.pad');\n  let metronome = null;\n  const helpButton = document.getElementById('help');\n\n  helpButton.addEventListener('click', () => {\n    tutorial.initialize();\n  })\n\n  metButton.addEventListener('click', (e) => {\n    if(metButton.classList.contains('selected')) {\n      metButton.classList.remove('selected');\n      metronome === null ? null : metronome.playing ? metronome.metronomePlaying = false : null;\n    } else {\n      metButton.classList.add('selected');\n      metronome === null ? null : metronome.playing ? metronome.metronomePlaying = true : null;\n    }\n    // if ( metronome === null || metronome === 'undefined' || metronome.playing === false) {\n    //   return;\n    // } else if(metronome.metronomePlaying === true) {\n    //   metronome.metronomePlaying = false;\n    //   metButton.classList.remove('selected');\n    //   return;\n    // }\n    // metronome.metronomePlaying = true;\n    // metButton.classList.add('selected');\n  });\n\n  playButton.addEventListener('click', (e) => {\n    if (metronome === null) {\n      metronome = new Metronome(soundFactory.drumKitBuffers, soundFactory.chordBuffers, soundFactory.monoBuffers, context, parseInt(document.getElementById('tempo').value), soundFactory.drumKeyCodes, soundFactory.chordKeyCodes, soundFactory.monoKeyCodes);\n      metronome.tempoEventListener();\n      metronome.handlePlay();\n      metronome.playing = true;\n      playButton.classList.add('selected')\n    } else if(metronome.playing === true) {\n      metronome.metronomePlaying = false;\n      metronome.stop();\n      metronome = null;\n      metButton.classList.remove('selected');\n      playButton.classList.remove('selected');\n      recordButton.classList.remove('selected');\n      recordButton.children[0].classList.add('far', 'fa-dot-circle');\n      recordButton.children[0].classList.remove('fas', 'fa-stop');\n      return;\n    }\n  });\n\n  window.addEventListener('keydown', (e) => {\n    if (e.keyCode !== 32) {\n      return;\n    }\n    if (metronome === null) {\n      metronome = new Metronome(soundFactory.drumKitBuffers, soundFactory.chordBuffers, soundFactory.monoBuffers, context, parseInt(document.getElementById('tempo').value), soundFactory.drumKeyCodes, soundFactory.chordKeyCodes, soundFactory.monoKeyCodes);\n      metronome.tempoEventListener();\n      metronome.handlePlay();\n      metronome.playing = true;\n      playButton.classList.add('selected');\n\n    } else if(metronome.playing === true) {\n      metronome.metronomePlaying = false;\n      metronome.stop();\n      playButton.classList.remove('selected');\n      metButton.classList.remove('selected');\n      recordButton.classList.remove('selected');\n\n      metronome = null;\n      return;\n    }\n  });\n\n  recordButton.addEventListener('click', (e) => {\n    if (metronome === null) {\n      metronome = new Metronome(soundFactory.drumKitBuffers, soundFactory.chordBuffers, soundFactory.monoBuffers, context, parseInt(document.getElementById('tempo').value), soundFactory.drumKeyCodes, soundFactory.chordKeyCodes, soundFactory.monoKeyCodes);\n      metronome.tempoEventListener();\n      metronome.keyHitEventListener();\n      metronome.handlePlay();\n      metronome.playing = true;\n      metronome.recording = true;\n      recordButton.classList.add('selected');\n      PlayUtil.clearAllScenes('on-beat');\n\n      recordButton.children[0].classList.remove('far', 'fa-dot-circle');\n      recordButton.children[0].classList.add('fas', 'fa-stop');\n\n    } else if (metronome.recording === true) {\n      PlayUtil.clearAllScenes('on-beat-record');\n      metronome.recording = false;\n      recordButton.classList.remove('selected');\n\n      recordButton.children[0].classList.add('far', 'fa-dot-circle');\n      recordButton.children[0].classList.remove('fas', 'fa-stop');\n\n    } else if (metronome.playing === true) {\n      PlayUtil.clearAllScenes('on-beat');\n      metronome.recording = true;\n      recordButton.classList.add('selected')\n      metronome.keyHitEventListener();\n\n      recordButton.children[0].classList.remove('far', 'fa-dot-circle');\n      recordButton.children[0].classList.add('fas', 'fa-stop');\n    }\n\n  });\n\n  tempoSlide.addEventListener('change', (e) => {\n    tempoField.value = e.target.value;\n  });\n\n  Array.from(chordNodeList).forEach((node, idx) => {\n    node.addEventListener('click', (e) => {\n      soundFactory.generateChord(idx);\n      node.classList.add('selected');\n      Array.from(chordNodeList).forEach((node2, idx2) => {\n        if (idx !== idx2) {\n          node2.classList.remove('selected');\n        }\n      });\n    });\n  });\n\n  Array.from(monoNodeList).forEach((node, idx) => {\n    node.addEventListener('click', (e) => {\n      soundFactory.generateMono(idx);\n      node.classList.add('selected');\n      Array.from(monoNodeList).forEach((node2, idx2) => {\n        if (idx !== idx2) {\n          node2.classList.remove('selected');\n        }\n      });\n    });\n  });\n\n  Array.from(clearNodeList).forEach((node, idx) => {\n    node.addEventListener('click', (e) => {\n      PlayUtil.clearScene(idx);\n    });\n  })\n\n  window.addEventListener('keydown', (e) => {\n    if (keySet.has(parseInt(e.keyCode))) {\n      let targetKey = document.querySelector(`div[data-key=\"${e.keyCode}\"]`);\n      targetKey.classList.add('play');\n    }\n  });\n\n  pads.forEach((pad) => {\n    pad.addEventListener('transitionend', () => {\n      pad.classList.remove('play')\n    })\n  });\n\n  // document.getElementById('demo').addEventListener('click', () => {\n  //   if (metronome) {\n  //     metronome.stop();\n  //     metronome = null;\n  //   }\n  //   metButton.classList.remove('selected');\n  //   playButton.classList.remove('selected');\n  //   recordButton.classList.remove('selected');\n  //   PlayUtil.clearAllScenes('selected');\n  //   metronome = new Metronome(soundFactory.drumKitBuffers, soundFactory.chordBuffers, soundFactory.monoBuffers, context, parseInt(document.getElementById('tempo').value), soundFactory.drumKeyCodes, soundFactory.chordKeyCodes, soundFactory.monoKeyCodes);\n  //   soundFactory.generateChord(0);\n  //   soundFactory.generateMono(0);\n  //   RunDemo(metronome, context);\n  // })\n\n  document.getElementById('demo').addEventListener('click', () => {\n    if (metronome) {\n      metronome.stop();\n      metronome = null;\n    }\n    metButton.classList.remove('selected');\n    playButton.classList.remove('selected');\n    recordButton.classList.remove('selected');\n    recordButton.children[0].classList.add('far', 'fa-dot-circle');\n    recordButton.children[0].classList.remove('fas', 'fa-stop');\n    PlayUtil.clearAllScenes('selected');\n    metronome = new Metronome(soundFactory.drumKitBuffers, soundFactory.chordBuffers, soundFactory.monoBuffers, context, parseInt(document.getElementById('tempo').value), soundFactory.drumKeyCodes, soundFactory.chordKeyCodes, soundFactory.monoKeyCodes);\n    // soundFactory.generateChord(0);\n    // soundFactory.generateMono(0);\n    let randomizer = new Randomizer(metronome, soundFactory, context);\n    randomizer.initializeBeat();\n  })\n\n}\n","import * as playUtil from './playUtil';\nimport * as recordingUtil from './recordingUtil';\n\nclass Metronome {\n  constructor(drumKitArray, chordArray, monoArray, context, tempo, drumKeyCodes, chordKeyCodes, monoKeyCodes) {\n    this.sounds = {drums: drumKitArray, chords: chordArray, mono: monoArray}\n    this.validKeySet = new Set([65, 83, 68, 70, 71, 72, 74, 75, 76, 186, 222, 13, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 219, 221, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189, 187]);\n    this.context = context;\n    this.tempo = tempo;\n    this.handlePlay = this.handlePlay.bind(this);\n    this.planNotes = this.planNotes.bind(this);\n    this.keyHitEventListener = this.keyHitEventListener.bind(this);\n    this.stop = this.stop.bind(this);\n    this.button = document.getElementById('metronome')\n    this.noteTime = 0.0;\n    this.startTime = 0.0\n    this.beat = 0;\n    this.timeoutId = 0;\n    this.keyCodes = {drums: drumKeyCodes, chords: chordKeyCodes, mono: monoKeyCodes};\n    this.recording = false;\n    this.metronomePlaying = document.getElementById('metronome').classList.contains('selected');\n    this.playing = false;\n  }\n\n  stop() {\n    clearTimeout(this.timeoutId);\n    this.recording = false;\n    playUtil.clearAllScenes('on-beat');\n    playUtil.clearAllScenes('on-beat-record');\n  }\n\n  playClick(time) {\n    if (this.beat % 16 === 0) {\n      const source = this.context.createBufferSource();\n      source.buffer = this.sounds.drums[189];\n      source.playbackRate.value = 1.2;\n      source.connect(this.context.destination);\n      source.start(time);\n    } else if (this.beat % 4 === 0) {\n\n      const source = this.context.createBufferSource();\n      source.buffer = this.sounds.drums[189];\n\n      const gainNode = this.context.createGain()\n      gainNode.gain.value = 0.7;\n      gainNode.connect(this.context.destination)\n      source.connect(gainNode)\n\n      source.start(time);\n    }\n  }\n\n  playSound(time) {\n    let soundList = playUtil.getSoundIdx(this.beat);\n    if (soundList.length === 0) {\n      return;\n    }\n    soundList.forEach((keyIdx) => {\n      if (keyIdx < 12) {\n        let soundIdx = this.keyCodes.drums[keyIdx];\n        let source = this.context.createBufferSource();\n        source.buffer = this.sounds.drums[soundIdx];\n        source.connect(this.context.destination);\n        source.start(time);\n      } else if (keyIdx > 11 && keyIdx < 24) {\n        let soundIdx = this.keyCodes.chords[keyIdx-12];\n        let source = this.context.createBufferSource();\n        source.buffer = this.sounds.chords[soundIdx];\n        source.playbackRate.value = playUtil.pitchTransform(keyIdx-12);\n        source.connect(this.context.destination);\n        source.start(time);\n      } else if (keyIdx > 23 && keyIdx < 36) {\n        let soundIdx = this.keyCodes.mono[keyIdx-24];\n        let source = this.context.createBufferSource();\n        source.buffer = this.sounds.mono[soundIdx];\n        source.playbackRate.value = playUtil.pitchTransform(keyIdx-24);\n        const gainNode = this.context.createGain()\n        gainNode.gain.value = 0.6;\n        gainNode.connect(this.context.destination)\n        source.connect(gainNode)\n        source.start(time);\n      }\n    });\n  }\n\n  handlePlay() {\n    this.beat = 0;\n    this.noteTime = 0.0\n    this.startTime = this.context.currentTime + .005;\n    this.planNotes();\n  }\n\n  planNotes() {\n    let currentTime = this.context.currentTime;\n    currentTime -= this.startTime;\n    while (this.noteTime < currentTime + .05) {\n      let contextPlayTime = this.noteTime + this.startTime;\n      playUtil.highlightBeat(this.beat, this.recording);\n      playUtil.unHighlightBeat(this.beat, this.recording);\n      this.playSound(contextPlayTime);\n      if (this.metronomePlaying) {\n        this.playClick(contextPlayTime);\n        this.animateMetronomeButton();\n      }\n      this.getNextNoteTime();\n    }\n\n    this.timeoutId = setTimeout(this.planNotes, 0);\n  }\n\n  getNextNoteTime() {\n    let secsPerBeat = 60.0/this.tempo;\n    this.noteTime += .125 * secsPerBeat;\n\n    this.beat === 31 ? this.beat = 0: this.beat += 1;\n  }\n\n  tempoEventListener() {\n    let tempoSlide = document.getElementById('tempo-slide');\n\n    tempoSlide.addEventListener('change', (e) => {\n      this.tempo = e.target.value;\n    })\n  }\n\n  keyHitEventListener() {\n    window.addEventListener('keydown', (e) => {\n      if (this.recording === false){\n        return;\n      }\n      if (this.validKeySet.has(e.keyCode)) {\n        let code = e.keyCode;\n        let id = recordingUtil.matchKeyStrokeToDivId(code, this.keyCodes, this.beat);\n        const selectedDiv = document.getElementById(id);\n        selectedDiv.classList.add('selected');\n      }\n    });\n  }\n\n  animateMetronomeButton() {\n    if (!Array.from(this.button.classList).join('').includes(\"selected\")) {\n      return;\n    }\n    if (this.beat % 16 === 0) {\n      this.button.childNodes[1].classList.remove(\"far\");\n      this.button.childNodes[1].classList.add(\"fas\");\n      this.button.childNodes[3].classList.remove(\"fas\");\n      this.button.childNodes[3].classList.add(\"far\");\n    } else if (this.beat % 8 === 0) {\n      this.button.childNodes[1].classList.remove(\"fas\");\n      this.button.childNodes[1].classList.add(\"far\");\n      this.button.childNodes[3].classList.remove(\"far\");\n      this.button.childNodes[3].classList.add(\"fas\");\n    }\n\n  }\n\n}\n\nexport default Metronome\n\n// does this work?\n","export const getSoundIdx = (beat) => {\n  const drumSoundIdxList = []\n  let rows = document.getElementsByClassName(`row-${beat}`);\n  rows = Array.from(rows);\n  rows.forEach((row, idx1) => {\n    let colArr = Array.from(row.childNodes).reverse();\n    colArr.forEach((node, idx2) => {\n      if (Array.from(node.classList).join('').includes(\"selected\")) {\n        drumSoundIdxList.push(idx2 + idx1*12);\n      }\n    })\n  });\n  return drumSoundIdxList;\n}\n\nexport const highlightBeat = (beat, recording) => {\n  let rows = document.getElementsByClassName(`row-${beat}`);\n  rows = Array.from(rows);\n  rows.forEach((row, idx) => {\n    let colArr = Array.from(row.childNodes);\n    colArr.forEach((node, idx) => {\n      recording ? node.classList.add('on-beat-record') : node.classList.add('on-beat');\n    })\n  });\n}\n\nexport const unHighlightBeat = (beat, recording) => {\n  let beatAlias;\n  beat === 0 ? beatAlias = 32 : beatAlias = beat;\n  let rows = document.getElementsByClassName(`row-${beatAlias - 1}`);\n  rows = Array.from(rows);\n  rows.forEach((row, idx) => {\n    let colArr = Array.from(row.childNodes);\n    colArr.forEach((node, idx) => {\n      recording ? node.classList.remove('on-beat-record') : node.classList.remove('on-beat');\n    })\n  });\n}\n\nexport const clearAllScenes = (className) => {\n  const master = document.getElementById(\"sequence-master\");\n  let sequences = master.childNodes;\n  sequences = Array.from(sequences);\n  sequences.forEach((sequence) => {\n    let rows = sequence.childNodes;\n    rows = Array.from(rows);\n    rows.forEach((row, idx) => {\n      let colArr = Array.from(row.childNodes);\n      colArr.forEach((node, idx) => {\n        node.classList.remove(className);\n      })\n    });\n  });\n}\n\nexport const clearScene = (index) => {\n  const master = document.getElementById(\"sequence-master\");\n  let sequences = master.childNodes;\n  let sequence = Array.from(sequences)[index+1];\n  let rows = sequence.childNodes;\n  rows = Array.from(rows);\n  rows.forEach((row, idx) => {\n    let colArr = Array.from(row.childNodes);\n    colArr.forEach((node, idx) => {\n      node.classList.remove('selected');\n    })\n  });\n}\n\nexport const pitchTransform = (keyIdx) => {\n  return Math.pow(10, ((keyIdx*100)*(Math.log10(2)/1200)))\n}\n","class Randomizer {\n\n  constructor(metronome, soundFactory, context) {\n    this.metronome = metronome;\n    this.soundFactory = soundFactory;\n    this.context = context\n    this.sub = null;\n    this.ride = null;\n    this.snare = null;\n    this.root = null;\n    this.selectedChords = [];\n    this.chordLocations = {};\n    this.monoLocations = {};\n  }\n\n  initializeBeat() {\n    this.resetSounds();\n    this.makeGlobalSettings();\n    this.makeDrums();\n    this.makeChords();\n    this.makeMonos();\n    const modal = document.getElementsByClassName(\"modal\")[0];\n    modal.classList.remove(\"hidden\");\n    const h1 = document.getElementById(\"randomizer-wait\");\n    h1.classList.remove(\"hidden\");\n    setTimeout(this.playBeat.bind(this), 2000)\n  }\n\n  playBeat() {\n    const modal = document.getElementsByClassName(\"modal\")[0];\n    modal.classList.add(\"hidden\");\n    const h1 = document.getElementById(\"randomizer-wait\");\n    h1.classList.add(\"hidden\");\n    this.metronome.tempoEventListener();\n    this.metronome.handlePlay();\n    this.metronome.playing = true;\n    document.getElementById('play').classList.add('selected')\n  }\n\n\n  resetSounds() {\n    const chordNodeList = document.getElementsByClassName('chord');\n    const monoNodeList = document.getElementsByClassName('mono');\n    Array.from(monoNodeList).forEach((node) => {\n      node.classList.remove(\"selected\")\n    });\n    Array.from(chordNodeList).forEach((node) => {\n      node.classList.remove(\"selected\")\n    });\n  }\n\n  makeGlobalSettings() {\n    const chords = ['chord-0', 'chord-1', 'chord-3', 'chord-4'];\n    const chord = chords[Math.floor(Math.random()*chords.length)];\n    document.getElementById(`${chord}`).classList.add('selected');\n    this.soundFactory.generateChord(parseInt(chord[chord.length-1]));\n\n    const monos = ['mono-0', 'mono-1', 'mono-2'];\n    const mono = monos[Math.floor(Math.random()*monos.length)];\n    document.getElementById(`${mono}`).classList.add('selected');\n    this.soundFactory.generateMono(parseInt(mono[mono.length-1]));\n\n    const tempoArr = Array.from(Array(91).keys()).splice(40);\n    this.metronome.tempo = tempoArr[Math.floor(Math.random()*tempoArr.length)];\n    document.getElementById('tempo').value = this.metronome.tempo;\n    document.getElementById('tempo-slide').value = this.metronome.tempo;\n  }\n\n  makeDrums() {\n    for (let idxR = 0; idxR < 32; idxR++) {\n      for (let idxC = 0; idxC < 12; idxC++) {\n        this.kicks(idxC, idxR);\n        this.snares(idxC, idxR);\n        this.hat(idxC, idxR);\n        this.rides(idxC, idxR);\n        this.clicker(idxC, idxR);\n        this.yeah(idxC, idxR);\n      }\n    }\n  }\n\n  makeChords() {\n    this.root = this.getRoot();\n    const intervals = [];\n    [-10, -7, -5, -2, 0, 2, 5, 7, 10].forEach(interval => {\n      if (this.root + interval > 0 && this.root + interval < 12) intervals.push(this.root + interval);\n    })\n    for (let idxR = 0; idxR < 32; idxR++) {\n      for (let idxC = 0; idxC < 12; idxC++) {\n        this.chordChancePicker(idxC, idxR, intervals);\n      }\n    }\n  }\n\n  makeMonos() {\n    for (let idxR = 0; idxR < 32; idxR++) {\n      for (let idxC = 24; idxC < 36; idxC++) {\n        this.monoChancePicker(idxC, idxR);\n      }\n    }\n  }\n  getRoot() {\n    let rootArr = Array.from(Array(12).keys());\n    let root = rootArr[Math.floor(Math.random()*rootArr.length)]\n    return root;\n  }\n\n  chordBeatPicker(beat, note) {\n    let window;\n    this.metronome.tempo < 70 ? window = 6 : this.metronome.tempo < 80 ? window = 8 : window = 12;\n    if (!this.selectedChords.includes(beat)) {\n      this.drumsChancePicker([note+12], beat, 2, 9, 9, 9, 8.5, 7);\n      if (document.getElementById(`row-${beat}-col-${note+12}`).classList.contains(\"selected\")) {\n        let windowArr = Array.from(Array(window+1).keys());\n        windowArr.forEach(num => {\n          this.selectedChords.push(beat + num);\n          this.chordLocations[beat + num] = note + 12;\n          if (beat - num <= 0) {\n            this.selectedChords.push(31 - num);\n          }\n        });\n      }\n    }\n  }\n\n  chordChancePicker(note, beat, intervals) {\n    if (note == this.root) {\n      this.chordBeatPicker(beat, note);\n    } else if (note == this.root + 7 || note == this.root - 7) {\n      this.chordBeatPicker(beat, note);\n    } else if (note == this.root + 5 || note == this.root - 5) {\n      this.chordBeatPicker(beat, note);\n    } else if (intervals.includes(note)) {\n      this.chordBeatPicker(beat, note);\n    }\n  }\n\n  drumsChancePicker(soundArr, beat, c0, cOther, c2, c4, c8, c16) {\n    if(beat === 0) {\n      if (Math.random()*10 > c0) {\n        soundArr.forEach( sound => {\n          this.selectDiv(beat, sound);\n          if (sound > 23) {\n            this.monoLocations[beat] = sound;\n          }\n        });\n      }\n    } else if(beat % 16 === 0) {\n      if (Math.random()*10 > c16) {\n        soundArr.forEach( sound => {\n          this.selectDiv(beat, sound);\n          if (sound > 23) {\n            this.monoLocations[beat] = sound;\n          }\n        });\n      }\n    } else if(beat % 8 === 0) {\n      if (Math.random()*10 > c8) {\n        soundArr.forEach( sound => {\n          this.selectDiv(beat, sound);\n          if (sound > 23) {\n            this.monoLocations[beat] = sound;\n          }\n        });\n      }\n    } else if(beat % 4 === 0) {\n      if (Math.random()*10 > c4) {\n        soundArr.forEach( sound => {\n          this.selectDiv(beat, sound);\n          if (sound > 23) {\n            this.monoLocations[beat] = sound;\n          }\n        });\n      }\n    } else if(beat % 2 === 0) {\n      if (Math.random()*10 > c2) {\n        soundArr.forEach( sound => {\n          this.selectDiv(beat, sound);\n          if (sound > 23) {\n            this.monoLocations[beat] = sound;\n          }\n        });\n      }\n    } else {\n      if (Math.random()*10 > cOther) {\n        soundArr.forEach( sound => {\n          this.selectDiv(beat, sound);\n          if (sound > 23) {\n            this.monoLocations[beat] = sound;\n          }\n        });\n      }\n    }\n  }\n\n  monoChancePicker(note, beat) {\n    let intervals = [];\n    let currentRoot = this.chordLocations[beat];\n    let i = 1;\n    while(!currentRoot) {\n      currentRoot = this.chordLocations[beat-i];\n      i++;\n    }\n    [-10, -9, -5, -2, 0, 2, 3, 7, 10].forEach(interval => {\n      if (currentRoot + interval > 11 && currentRoot + interval < 24) intervals.push(currentRoot + interval);\n    });\n    let pitch = intervals[Math.floor(Math.random()*intervals.length)] + 12;\n    if (!this.monoLocations[beat]) {\n      this.drumsChancePicker([pitch], beat, 2, 9, 8.5, 8, 7, 7);\n    }\n  }\n\n  selectDiv(beat, sound) {\n    let div = document.getElementById(`row-${beat}-col-${sound}`);\n    div.classList.add('selected');\n  }\n\n  kicks(sound, beat) {\n    if (sound !== 2) return null;\n    this.sub != null ? this.sub : Math.random()*10 > 4 ? this.sub = 0 : this.sub = 1;\n    Math.random()*10 > 6 ? this.drumsChancePicker([sound, this.sub], beat, 0.0, 7, 4, 3, 2, 1) : this.drumsChancePicker([sound], beat, 0, 7, 4, 3, 2, 1);\n  }\n\n  snares(sound, beat) {\n    if (sound !== 3 && sound !== 4) return null;\n    this.snare ? this.snare : Math.random()*10 > 3 ? this.snare = 6 : this.snare = 5;\n    beat % 8 === 0 ? this.drumsChancePicker([sound, this.snare], beat, 10, 10, 2, 1, 1) : this.drumsChancePicker([sound], beat, 9.8, 9, 8, 5, 0, 9.7);\n  }\n\n  hat(sound, beat) {\n    if (sound !== 7) return null;\n    this.drumsChancePicker([sound], beat, 0, 7, 2, 0, 2, 1)\n  }\n\n  rides(sound, beat) {\n    if (sound !== 8) return null;\n    this.ride ? this.ride : Math.random()*10 > 3 ? this.ride = 8 : this.ride = 9;\n    this.drumsChancePicker([this.ride], beat, 9, 9.5, 9, 9, 9, 9)\n  }\n\n  clicker(sound, beat) {\n    if (sound !== 10) return null;\n    this.drumsChancePicker([sound], beat, 9, 9.7, 8, 9, 9.4, 9)\n  }\n\n  yeah(sound, beat) {\n    if (sound < 11) return null;\n    this.drumsChancePicker([sound], beat, 9.8, 9.9, 9.8, 9.8, 9.8, 9.8)\n  }\n\n\n}\n\n\n\nexport default Randomizer;\n","export const matchKeyStrokeToDivId = (keyCode, keyCodeObj, beat) => {\n  let row = beat;\n  row === 0 ? row = 31 : row = row - 1;\n\n  let col;\n  if (keyCodeObj.drums.includes(keyCode)) {\n    col = keyCodeObj.drums.indexOf(keyCode)\n  } else if (keyCodeObj.chords.includes(keyCode)) {\n    col = keyCodeObj.chords.indexOf(keyCode) + 12\n  } else if (keyCodeObj.mono.includes(keyCode)) {\n    col = keyCodeObj.mono.indexOf(keyCode) + 24\n  }\n\n  return `row-${row}-col-${col}`;\n}\n","class SoundUtil {\n\n  constructor(context) {\n    this.context = context;\n    this.drumKitSoundNames = [ '808bass2', '808high', 'Kick', 'snare', 'shortSnare', 'clap', 'strongClap', 'hiHat', 'shortRide', 'crash', 'click', 'gucciYeah', ];\n    this.chordSoundNames = [ 'cloudPad', 'blubberPad', 'emeraldHazePad', 'infinityPad', 'synthPluck' ];\n    this.monoSoundNames = [ 'analogLead', 'currentsLead', 'screamLead']\n    this.drumKitBuffers = {};\n    this.chordBuffers = {};\n    this.monoBuffers = {};\n    this.generateChord = this.generateChord.bind(this);\n    this.generateDrums = this.generateDrums.bind(this);\n    this.generateMono = this.generateMono.bind(this);\n    this.keyDownEventListener = this.keyDownEventListener.bind(this);\n    this.monoKeyCodes = [65, 83, 68, 70, 71, 72, 74, 75, 76, 186, 222, 13];\n    this.chordKeyCodes = [81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 219, 221];\n    this.drumKeyCodes = [49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189, 187];\n  }\n\n  generateDrums() {\n    this.drumKitSoundNames.forEach((soundName, idx) => {\n      fetch('https://raw.githubusercontent.com/NBAtbaldwin/tinyDAW/master/assets/drum_kit/' + soundName + '.wav')\n      .then(response => response.arrayBuffer())\n      .then(buffer => {\n        this.context.decodeAudioData(buffer, decoded => {\n          this.drumKitBuffers[this.drumKeyCodes[idx]] = decoded;\n        });\n      })\n    });\n  }\n\n  generateChord(idx) {\n    this.chordKeyCodes.forEach((code) => {\n      fetch(`https://raw.githubusercontent.com/NBAtbaldwin/tinyDAW/master/assets/drum_kit/${this.chordSoundNames[idx]}.wav`)\n      .then(response => response.arrayBuffer())\n      .then(buffer => {\n        this.context.decodeAudioData(buffer, decoded => {\n          this.chordBuffers[code] = decoded;\n        });\n      })\n    });\n  }\n\n  generateMono(idx) {\n    this.monoKeyCodes.forEach((code) => {\n      fetch(`https://raw.githubusercontent.com/NBAtbaldwin/tinyDAW/master/assets/drum_kit/${this.monoSoundNames[idx]}.wav`)\n      .then(response => response.arrayBuffer())\n      .then(buffer => {\n        this.context.decodeAudioData(buffer, decoded => {\n          this.monoBuffers[code] = decoded;\n        });\n      })\n    })\n  }\n\n  keyDownEventListener() {\n    const that = this;\n    window.addEventListener('keydown', function(e) {\n      let source = that.context.createBufferSource();\n      let code = e.keyCode;\n      if (Object.keys(that.drumKitBuffers).includes(code.toString())) {\n        source.buffer = that.drumKitBuffers[code];\n        source.connect(that.context.destination);\n        source.start();\n      } else if (Object.keys(that.chordBuffers).includes(code.toString())) {\n        source.buffer = that.chordBuffers[code];\n        source.playbackRate.value = that.pitchFromIndex(code, 'chord');\n        source.connect(that.context.destination);\n        source.start();\n        // window.addEventListener('keyup', (e) => {\n        //   if (e.keyCode === code) {\n        //     source.stop()\n        //   }\n        // })\n      } else if (Object.keys(that.monoBuffers).includes(code.toString())) {\n        source.buffer = that.monoBuffers[code];\n        source.playbackRate.value = that.pitchFromIndex(code, 'mono');\n        source.connect(that.context.destination);\n        source.start();\n      }\n    });\n  }\n\n  pitchFromIndex(code, instrument) {\n    let idx;\n    switch (instrument) {\n      case \"chord\":\n        idx = this.chordKeyCodes.indexOf(code)\n        // return (1 + ((idx/12)*.5))*2;\n        return Math.pow(10, ((idx*100)*(Math.log10(2)/1200)))\n      case \"mono\":\n        idx = this.monoKeyCodes.indexOf(code);\n        return Math.pow(10, ((idx*100)*(Math.log10(2)/1200)))\n        // return idx;\n    }\n  }\n\n}\n\nexport default SoundUtil;\n","class Tutorial {\n  constructor() {\n\n  }\n\n  initialize() {\n    this.dir1Listeners();\n    const modal = document.getElementsByClassName(\"modal\")[0];\n    modal.classList.remove(\"hidden\");\n    const directions1 = document.getElementById(\"directions-1\");\n    directions1.classList.remove(\"hidden\");\n    this.dir2Listeners();\n    this.dir3Listeners();\n  }\n\n  dir1Listeners() {\n    document.getElementById(\"exit-1\").addEventListener('click', () => {\n      document.getElementsByClassName(\"modal\")[0].classList.add(\"hidden\");\n      document.getElementById(\"directions-1\").classList.add(\"hidden\");\n    });\n    document.getElementById(\"next-1\").addEventListener('click', () => {\n      document.getElementById(\"directions-1\").classList.add(\"hidden\");      document.getElementById(\"directions-2\").classList.remove(\"hidden\");\n    });\n  }\n\n  dir2Listeners() {\n    document.getElementById(\"exit-2\").addEventListener('click', () => {\n      document.getElementsByClassName(\"modal\")[0].classList.add(\"hidden\");\n      document.getElementById(\"directions-2\").classList.add(\"hidden\");\n    });\n    document.getElementById(\"next-2\").addEventListener('click', () => {\n      document.getElementById(\"directions-2\").classList.add(\"hidden\");      document.getElementById(\"directions-3\").classList.remove(\"hidden\");\n    });\n    document.getElementById(\"back-2\").addEventListener('click', () => {\n      document.getElementById(\"directions-2\").classList.add(\"hidden\");      document.getElementById(\"directions-1\").classList.remove(\"hidden\");\n    });\n  }\n\n  dir3Listeners() {\n    document.getElementById(\"exit-3\").addEventListener('click', () => {\n      document.getElementsByClassName(\"modal\")[0].classList.add(\"hidden\");\n      document.getElementById(\"directions-3\").classList.add(\"hidden\");\n    });\n\n    document.getElementById(\"back-3\").addEventListener('click', () => {\n      document.getElementById(\"directions-3\").classList.add(\"hidden\");      document.getElementById(\"directions-2\").classList.remove(\"hidden\");\n    });\n  }\n\n}\n\nexport default Tutorial;\n"],"sourceRoot":""}